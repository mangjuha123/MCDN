//select specifict limit		
if (!SqlLimitPos.Equals("")) 			
	ulong tmpLimit = 0;
	ulong.TryParse(SqlLimitPos, out tmpLimit);
	int tmp = (int)selectSpesifictPage(tmpLimit, sqlLimit, sqlPagesCount);
	limit_x = (sqlLimit * tmp).ToString();
	comboPage.SelectedIndex = tmp;
}
private ulong selectSpesifictPage(ulong pos, ulong limit, ulong page) {
    ulong i = 0;
    for (i = 1; i <= page; ++i) {
        if (limit * (i - 1) >= pos) {
            return i == 1 ? i - 1 : i - 2;
        }
    }
    return i == 1 ? i - 1 : i - 2;
}



private bool creatFile(string titleWindow) {
    SaveFileDialog saveFile = new SaveFileDialog();
    saveFile.Filter = FileIO.FileInfo.GetSQLFileExtension;
    saveFile.FileName = this.TabHeaderText;
    saveFile.Title = titleWindow;
    if (saveFile.ShowDialog() == DialogResult.OK) {
        if (this.IsDuplicateFileInTab(saveFile.FileName)) {
            Msg.Warrn("File is opened on this tab");
            this.forceCloseTab();
            return false;
        }
        this.filePath = saveFile.FileName;
        this.TabHeaderText = System.IO.Path.GetFileName(saveFile.FileName);
        using (StreamWriter sw = new StreamWriter(File.Open(this.FilePath, FileMode.Create), this.EncodingFile)) {
            sw.Write(string.Empty);
        }
        return true;
    }
    return false;
}


            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;

			346, 195

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace WindowsFormsApplication1 {
    public partial class Form1 : Form {
        public Form1() {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e) {
            backgroundWorker1.RunWorkerAsync();
        }

        private void button2_Click(object sender, EventArgs e) {
            backgroundWorker1.CancelAsync();
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e) {
            for (int i = 1; i <= 100; ++i) {
                backgroundWorker1.ReportProgress(i);
                System.Threading.Thread.Sleep(1000);
                if (backgroundWorker1.CancellationPending) {
                    e.Cancel = true;
                    break;
                }
            }
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e) {
            labelPercen.Text = e.ProgressPercentage.ToString();
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e) {
            if (!e.Cancelled)
                MessageBox.Show("Berhasil", "haha", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            else
                MessageBox.Show("Batal", "anjing", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
}


ulong cnt = 0;
if (!EnableSqlLimit) {
    e.Result = cnt;
    return;
}
MySqlConnection _cnn;
MySqlCommand _cmmd;
MySqlDataReader _dr;
try {
    using (_cnn = new MySqlConnection(cnnstr)) {
        _cnn.Open();
        using (_cmmd = new MySqlCommand(sqlText, _cnn)) {
            using (_dr = _cmmd.ExecuteReader()) {
                while (_dr.Read()) {
                    ++cnt;
                }
            }
        }
        _cnn.Close();
    }
} catch (MySqlException myEx) {
    if (_cnn != null) {
        _cnn.Close();
        _cnn.Dispose();
    }
    throw new Exception(myEx.Message);
}

e.Result = cnt;




private ulong dividedUlong(ulong x, ulong y) {
    return x % y == 0 ? (x / y) : (x / y) + 1;
}

//Table Builder
+---------------+--------------+------------+------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+---------------------------+------------+-------------------+---------------------------------+----------------+-----------------------+
| TABLE_CATALOG | TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME      | ORDINAL_POSITION | COLUMN_DEFAULT | IS_NULLABLE | DATA_TYPE | CHARACTER_MAXIMUM_LENGTH | CHARACTER_OCTET_LENGTH | NUMERIC_PRECISION | NUMERIC_SCALE | DATETIME_PRECISION | CHARACTER_SET_NAME | COLLATION_NAME | COLUMN_TYPE               | COLUMN_KEY | EXTRA             | PRIVILEGES                      | COLUMN_COMMENT | GENERATION_EXPRESSION |
+---------------+--------------+------------+------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+---------------------------+------------+-------------------+---------------------------------+----------------+-----------------------+
| def           | db_example   | new_table  | id               |                1 | NULL           | NO          | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)                   | PRI        |                   | select,insert,update,references |                |                       |
| def           | db_example   | new_table  | col              |                2 | NULL           | YES         | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)                   |            | VIRTUAL GENERATED | select,insert,update,references |                | (`id` + 1)            |
| def           | db_example   | new_table  | col_int          |                3 | NULL           | YES         | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11) unsigned          |            |                   | select,insert,update,references |                |                       |
| def           | db_example   | new_table  | col_decimal      |                4 | NULL           | YES         | decimal   |                     NULL |                   NULL |                 3 |             2 |               NULL | NULL               | NULL           | decimal(3,2) unsigned     |            |                   | select,insert,update,references |                |                       |
| def           | db_example   | new_table  | col_int_zerofill |                5 | NULL           | YES         | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(10) unsigned zerofill |            |                   | select,insert,update,references |                |                       |
| def           | db_example   | new_table  | col_int_ai       |                6 | NULL           | NO          | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)                   | UNI        | auto_increment    | select,insert,update,references |                |                       |
+---------------+--------------+------------+------------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+---------------------------+------------+-------------------+---------------------------------+----------------+-----------------------+

ADD COLUMN `tb_1col` INT GENERATED ALWAYS AS ((`id` + 3)) AFTER `id_exp_virtual`;

//col index
coumn name		= 0
comment			= 1 
data type		= 2
size			= 3
pk				= 4
nn				= 5
uq				= 6
un				= 7
zf				= 8
ai				= 9
g				= 10
def/ex			= 11
virtual/store	= 12


"Primary Key",
"Not Null",
"Unsigned",
"Zero Fill",
"Auto Increment",
"Gnereted Column"


alter table tb_test1 add constraint foreign key `fog_id` (id_tes2) references tb_tes2 (id) on delete cascade on update no action;

SELECT 
	COLUMN_NAME, //0
	COLUMN_COMMENT, //1
	DATA_TYPE, //2
	COLUMN_TYPE, //3
	COLUMN_KEY, //4
	IS_NULLABLE, //5
	EXTRA, //6
	COLUMN_DEFAULT, //7
	GENERATION_EXPRESSION //8
FROM 
	COLUMNS 
WHERE 
	TABLE_SCHEMA='db_example' 
AND 
	TABLE_NAME='new_table' 
ORDER BY 
	ORDINAL_POSITION 
ASC;

SELECT 
    COL.COLUMN_NAME, 
    COL.COLUMN_COMMENT, 
    COL.DATA_TYPE, 
    COL.COLUMN_TYPE, 
    COL.COLUMN_KEY, 
    COL.IS_NULLABLE, 
    COL.EXTRA, 
    COL.COLUMN_DEFAULT, 
    COL.GENERATION_EXPRESSION, 
    KEYCOL.CONSTRAINT_NAME 
FROM 
    COLUMNS AS COL 
LEFT JOIN 
    KEY_COLUMN_USAGE AS KEYCOL 
    ON 
        COL.TABLE_SCHEMA=KEYCOL.TABLE_SCHEMA 
    AND 
        COL.TABLE_NAME=KEYCOL.TABLE_NAME 
    AND 
        COL.COLUMN_NAME=KEYCOL.COLUMN_NAME 
WHERE 
    COL.TABLE_SCHEMA='db_new' 
AND 
    COL.TABLE_NAME='tb_ex' 
ORDER BY 
    COL.ORDINAL_POSITION 
ASC;

//zero fill
Here is some example SQL that demonstrates the use of ZEROFILL:

CREATE TABLE yourtable (x INT(8) ZEROFILL NOT NULL, y INT(8) NOT NULL);
INSERT INTO yourtable (x,y) VALUES
(1, 1),
(12, 12),
(123, 123),
(123456789, 123456789);
SELECT x, y FROM yourtable;
Result:

        x          y
 00000001          1
 00000012         12
 00000123        123
123456789  123456789


			decimalConstrain = new string[] {
                "Primary Key",
                "Not Null",
                "Unique Index",
                "Unsigned",
                "Zero Fill",
                "Gnereted Column"
            };

            IntegerConstrain = new string[] {
                "Primary Key",
                "Not Null",
                "Unique Index",
                "Unsigned",
                "Zero Fill",
                "Auto Increment",
                "Gnereted Column"
            };

            textConstrain = new string[] {
                "Primary Key",
                "Not Null",
                "Unique Index",
                "Gnereted Column"
            };

//error
System.Console.Beep();

//select engine
SELECT ENGINE FROM ENGINES WHERE SUPPORT='DEFAULT' OR SUPPORT='YES';

//generete col
mysql> select TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, GENERATION_EXPRESSION from COLUMNS where TABLE_SCHEMA='db_example' AND TABLE_NAME='tb_1';
col = GENERATION_EXPRESSION
+--------------+------------+----------------+-----------------------+
| TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME    | GENERATION_EXPRESSION |
+--------------+------------+----------------+-----------------------+
| db_example   | tb_1       | id             |                       |
| db_example   | tb_1       | id_exp_store   | (`id` + 1)            |
| db_example   | tb_1       | id_exp_virtual | (`id` + 2)            |
+--------------+------------+----------------+-----------------------+
3 rows in set (0.00 sec)

mysql> select * FROM COLUMNS where TABLE_SCHEMA='db_example' AND TABLE_NAME='tb_1';
+---------------+--------------+------------+----------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+-------------+------------+-------------------+---------------------------------+----------------+-----------------------+
| TABLE_CATALOG | TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME    | ORDINAL_POSITION | COLUMN_DEFAULT | IS_NULLABLE | DATA_TYPE | CHARACTER_MAXIMUM_LENGTH | CHARACTER_OCTET_LENGTH | NUMERIC_PRECISION | NUMERIC_SCALE | DATETIME_PRECISION | CHARACTER_SET_NAME | COLLATION_NAME | COLUMN_TYPE | COLUMN_KEY | EXTRA             | PRIVILEGES                      | COLUMN_COMMENT | GENERATION_EXPRESSION |
+---------------+--------------+------------+----------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+-------------+------------+-------------------+---------------------------------+----------------+-----------------------+
| def           | db_example   | tb_1       | id             |                1 | NULL           | NO          | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)     | PRI        |                   | select,insert,update,references |                |                       |
| def           | db_example   | tb_1       | id_exp_store   |                2 | NULL           | YES         | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)     |            | STORED GENERATED  | select,insert,update,references |                | (`id` + 1)            |
| def           | db_example   | tb_1       | id_exp_virtual |                3 | NULL           | YES         | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL           | int(11)     |            | VIRTUAL GENERATED | select,insert,update,references |                | (`id` + 2)            |
+---------------+--------------+------------+----------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+----------------+-------------+------------+-------------------+---------------------------------+----------------+-----------------------+

//enum and set
col = COLUMN_TYPE

mysql> select * FROM COLUMNS where TABLE_SCHEMA='db_example' AND TABLE_NAME='tb_bes';
+---------------+--------------+------------+-------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+------------------+----------------------+------------+-------+---------------------------------+----------------+-----------------------+
| TABLE_CATALOG | TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME | ORDINAL_POSITION | COLUMN_DEFAULT | IS_NULLABLE | DATA_TYPE | CHARACTER_MAXIMUM_LENGTH | CHARACTER_OCTET_LENGTH | NUMERIC_PRECISION | NUMERIC_SCALE | DATETIME_PRECISION | CHARACTER_SET_NAME | COLLATION_NAME   | COLUMN_TYPE          | COLUMN_KEY | EXTRA | PRIVILEGES                      | COLUMN_COMMENT | GENERATION_EXPRESSION |
+---------------+--------------+------------+-------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+------------------+----------------------+------------+-------+---------------------------------+----------------+-----------------------+
| def           | db_example   | tb_bes     | id          |                1 | NULL           | NO          | int       |                     NULL |                   NULL |                10 |             0 |               NULL | NULL               | NULL             | int(11)              | PRI        |       | select,insert,update,references |                |                       |
| def           | db_example   | tb_bes     | bit_col     |                2 | NULL           | YES         | bit       |                     NULL |                   NULL |                 2 |          NULL |               NULL | NULL               | NULL             | bit(2)               |            |       | select,insert,update,references |                |                       |
| def           | db_example   | tb_bes     | enum_col    |                3 | NULL           | YES         | enum      |                        5 |                     20 |              NULL |          NULL |               NULL | utf32              | utf32_general_ci | enum('true','false') |            |       | select,insert,update,references |                |                       |
| def           | db_example   | tb_bes     | set_col     |                4 | NULL           | YES         | set       |                        3 |                     12 |              NULL |          NULL |               NULL | utf32              | utf32_general_ci | set('a','b')         |            |       | select,insert,update,references |                |                       |
+---------------+--------------+------------+-------------+------------------+----------------+-------------+-----------+--------------------------+------------------------+-------------------+---------------+--------------------+--------------------+------------------+----------------------+------------+-------+---------------------------------+----------------+-----------------------+


ALTER TABLE `db_example`.`new_table` 
DROP COLUMN `new_tablecol0`,
CHANGE COLUMN `new_tablecol1` `new_tablecol2` VARCHAR(45) NULL DEFAULT NULL ,
ADD COLUMN `new_tablecol3` VARCHAR(45) NULL AFTER `new_tablecol2`;

CREATE TABLE `tb_example` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nama` varchar(45) NOT NULL,
  `umur` int(10) unsigned zerofill NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf32;

ADD COLUMN `new_tablecol1` INT UNSIGNED ZEROFILL NOT NULL COMMENT 'aku' AFTER `new_tablecol`;


SELECT 
    TBS.TABLE_COMMENT, 
    TBS.ENGINE, 
	COL.CHARACTER_SET_NAME,
    TBS.TABLE_COLLATION,
	COL.IS_DEFAULT 
FROM 
    TABLES AS TBS
LEFT JOIN
	COLLATIONS AS COL
ON
	TBS.TABLE_COLLATION=COL.COLLATION_NAME
WHERE 
    TBS.TABLE_SCHEMA='db_new' 
AND 
    TBS.TABLE_NAME='tb_ex';
	
SELECT 
    *
FROM 
    TABLES 
WHERE 
    TABLES.TABLE_SCHEMA='db_example' 
AND 
    TABLES.TABLE_NAME='tb_example';

CHARACTER SET = koi8r , COLLATE = koi8r_general_ci , ENGINE = MyISAM , RENAME TO  `db_new`.`tb_ex_` ;

ENGINE = MyISAM
DEFAULT CHARACTER SET = gb2312
COMMENT = 'hahah';

colInfo == null
listCheckConstraint.SetItemChecked(6, (bool)rowCell[9].Value);


CREATE TABLE tb_data(conn_name VARCHAR(45) PRIMARY KEY, server VARCHAR(200), port VARCHAR(15), usr VARCHAR(45), passwd TEXT, def_db VARCHAR(45));

ALTER SCHEMA `db_old`  DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_danish_ci ;



REVOKE ALL PRIVILEGES ON *.* FROM 'pma'@'localhost'; GRANT ALL PRIVILEGES ON *.* TO 'pma'@'localhost' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;


REVOKE ALL PRIVILEGES ON *.* FROM 'pma'@'localhost'; REVOKE GRANT OPTION ON *.* FROM 'pma'@'localhost'; GRANT USAGE ON *.* TO 'pma'@'localhost' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;

REVOKE ALL PRIVILEGES ON *.* FROM 'pma'@'localhost'; 
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, 
PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, 
SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, 
REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, 
EVENT, TRIGGER, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER,
EXECUTE 
ON *.* TO 'pma'@'localhost' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;

REVOKE ALL PRIVILEGES ON *.* FROM 'root'@'127.0.0.1'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'127.0.0.1' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;

REVOKE ALL PRIVILEGES ON *.* FROM 'haha'@'%'; GRANT USAGE ON *.* TO 'haha'@'%' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;

SELECT, 
INSERT, 
UPDATE, 
DELETE, 
FILE, 
CREATE, 
ALTER, 
DROP, 
RELOAD, 
SHUTDOWN, 
PROCESS, 
REFERENCES, 
INDEX, 
SHOW DATABASES, 
SUPER, 
CREATE TEMPORARY TABLES, 
LOCK TABLES, 
REPLICATION SLAVE, 
REPLICATION CLIENT, 
CREATE VIEW, 
EVENT, 
TRIGGER, 
SHOW VIEW, 
CREATE ROUTINE, 
ALTER ROUTINE, 
CREATE USER,
EXECUTE 


Select_priv AS 'SELECT',
Insert_priv AS 'INSERT',
Update_priv AS 'UPDATE',
Delete_priv AS 'DELETE',
File_priv AS 'FILE',
Create_priv AS 'CREATE',
Alter_priv AS 'ALTER',
Index_priv AS 'INDEX',
Drop_priv AS 'DROP',
Create_tmp_table_priv AS 'CREATE TEMPORARY TABLES',
Show_view_priv AS 'SHOW VIEW',
Create_routine_priv AS 'CREATE ROUTINE',
Alter_routine_priv AS 'ALTER ROUTINE',
Execute_priv AS 'EXECUTE',
Create_view_priv AS 'CREATE VIEW',
Event_priv AS 'EVENT',
Trigger_priv AS 'TRIGGER',
Grant_priv AS 'GRANT',
Super_priv AS 'SUPER',
Process_priv AS 'PROCESS',
Reload_priv AS 'RELOAD',
Shutdown_priv AS 'SHUTDOWN',
Show_db_priv AS 'SHOW DATABASES',
Lock_tables_priv AS 'LOCK TABLES',
References_priv AS 'REFERENCES',
Repl_client_priv AS 'REPLICATION CLIENT',
Repl_slave_priv AS 'REPLICATION SLAVE',
Create_user_priv AS 'CREATE USER',
User,
Host,
max_questions,
max_updates,
max_connections,
max_user_connections 

    Select_priv AS 'SELECT',
    Insert_priv,
    Update_priv,
    Delete_priv,
    File_priv,
    Create_priv,
    Alter_priv,
    Index_priv,
    Drop_priv,
    Create_tmp_table_priv,
    Show_view_priv,
    Create_routine_priv,
    Alter_routine_priv,
    Execute_priv,
    Create_view_priv,
    Event_priv,
    Trigger_priv,
    Grant_priv,
    Super_priv,
    Process_priv,
    Reload_priv,
    Shutdown_priv,
    Show_db_priv,
    Lock_tables_priv,
    References_priv,
    Repl_client_priv,
    Repl_slave_priv,
    Create_user_priv,
    User,
    Host,
    max_questions,
    max_updates,
    max_connections,
    max_user_connections 

REVOKE ALL PRIVILEGES ON *.* FROM 'bajing'@'localhost'; REVOKE GRANT OPTION ON *.* FROM 'bajing'@'localhost'; GRANT USAGE  ON *.* TO 'bajing'@'localhost'; GRANT  SELECT, INSERT, UPDATE, DELETE, FILE, CREATE, ALTER, INDEX, DROP, CREATE TEMPORARY TABLES, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE VIEW, EVENT, TRIGGER, SUPER, PROCESS, RELOAD, SHUTDOWN, SHOW DATABASES, LOCK TABLES, REFERENCES, REPLICATION CLIENT, REPLICATION SLAVE, CREATE USER ON *.* TO 'bajing'@'localhost' WITH MAX_QUERIES_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
GRANT  SELECT, INSERT, UPDATE, DELETE, FILE, CREATE, ALTER, INDEX, DROP, CREATE TEMPORARY TABLES, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE VIEW, EVENT, TRIGGER, SUPER, PROCESS, RELOAD, SHUTDOWN, SHOW DATABASES, LOCK TABLES, REFERENCES, REPLICATION CLIENT, REPLICATION SLAVE, CREATE USER ON *.* TO 'bajing'@'localhost' WITH MAX_QUERIES_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_USER_CONNECTIONS 0

REVOKE ALL PRIVILEGES ON *.* FROM 'bajing'@'localhost'; REVOKE GRANT OPTION ON *.* FROM 'bajing'@'localhost'; GRANT USAGE  ON *.* TO 'bajing'@'localhost'; GRANT  SELECT, INSERT, UPDATE, DELETE, FILE, CREATE, ALTER, INDEX, DROP, CREATE TEMPORARY TABLES, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE VIEW, EVENT, TRIGGER, GRANT, SUPER, PROCESS, RELOAD, SHUTDOWN, SHOW DATABASES, LOCK TABLES, REFERENCES, REPLICATION CLIENT, REPLICATION SLAVE, CREATE USER ON *.* TO 'bajing'@'localhost' WITH MAX_QUERIES_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ' SUPER, PROCESS, RELOAD, SHUTDOWN, SHOW DATABASES, LOCK TABLES, REFERENCES, REPL' at line 1


CREATE USER 'jaja'@'localhost' IDENTIFIED BY 'jaja' GRANT ALL PRIVILEGES ON *.* TO 'jaja'@'localhost'; GRANT USAGE ON *.* TO 'jaja'@'localhost' WITH MAX_QUERIES_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'GRANT ALL PRIVILEGES ON *.* TO 'jaja'@'localhost'' at line 1

//-----------------------------------------------------------------------------------------------------------------
private void loadDatabaseTree(object sender, DoWorkEventArgs ev)

//show database, table and Describe columns
            TreeNode tree = new TreeNode();
            bool err = false;
            string err_msg = "";
            MySqlUtil.ReadDatas rd = null;
            try {
                rd = new MySqlUtil.ReadDatas(MySqlConfig.ConnectionString, "SHOW DATABASES;");
                if (rd.HasRows) {
                    while (rd.Read()) {
                        if (!MySqlConfig.DBFromSystem(rd.Data[0].ToString()))
                            tree.Nodes.Add(new TreeNode(rd.Data[0].ToString(), 0, 0));
                    }
                }
            } catch (MySqlException e) {
                err = true;
                err_msg = e.Message;
            } finally {
                if (rd != null)
                    rd.Dispose();
            }

            if (err)
                throw new Exception(err_msg);

            for (int i = 0; i < tree.Nodes.Count; ++i) {
                try {
                    rd = new MySqlUtil.ReadDatas(MySqlConfig.ConnectionString, "SHOW TABLES FROM " + tree.Nodes[i].Text + ";");
                    if (rd.HasRows) {
                        while (rd.Read()) {
                            tree.Nodes[i].Nodes.Add(new TreeNode(rd.Data[0].ToString(), 1, 1));
                        }
                    }
                    rd.Dispose();
                    for (int j = 0; j < tree.Nodes[i].Nodes.Count; ++j) {
                        rd = new MySqlUtil.ReadDatas(MySqlConfig.ConnectionString, "DESCRIBE " + tree.Nodes[i].Text + "." + tree.Nodes[i].Nodes[j].Text + ";");
                        if (rd.HasRows) {
                            while (rd.Read()) {
                                tree.Nodes[i].Nodes[j].Nodes.Add(new TreeNode(rd.Data[0].ToString() + " " + rd.Data[1].ToString(), 2, 2));
                            }
                        }
                        rd.Dispose();
                    }
                } catch (MySqlException e) {
                    err = true;
                    err_msg = e.Message;
                } finally {
                    if (rd != null)
                        rd.Dispose();
                }
                if (err)
                    throw new Exception(err_msg);
            }

            for (int k = 0; k < tree.Nodes.Count; ++k) {
                loadTreeExplorer.ReportProgress(k, tree.Nodes[k]);
            }

//select and order
		bool err = false;
            string err_msg = "";
            string query =
@"SELECT
    TABLE_SCHEMA,
    TABLE_NAME,
    COLUMN_NAME,
    COLUMN_TYPE 
FROM 
    COLUMNS 
ORDER BY 
    TABLE_SCHEMA ASC, 
    TABLE_NAME ASC,  
    ORDINAL_POSITION ASC;";
            MySqlUtil.ReadDatas rd = null;
            try {
                rd = new MySqlUtil.ReadDatas(MySqlConfig.ConnectionStringUseDatabase("information_schema"), query);
                if (rd.HasRows) {
                    TreeNode tree_db = new TreeNode();
                    TreeNode tree_tb = new TreeNode();
                    TreeNode tree_col = new TreeNode();
                    string db_tmp = "", tb_tmp = "";
                    string db, tb, col, typ;
                    bool first = true;
                    while (rd.Read()) {
                        db = rd.Data[0].ToString();
                        tb = rd.Data[1].ToString();
                        col = rd.Data[2].ToString();
                        typ = rd.Data[3].ToString();
                        if (!MySqlConfig.DBFromSystem(db)) {
                            if (first) {
                                db_tmp = db;
                                tb_tmp = tb;
                                tree_db = new TreeNode(db, 0, 0);
                                tree_tb = new TreeNode(tb, 1, 1);
                                first = false;
                            }

                            tree_col = new TreeNode(col + " " + typ, 2, 2);

                            if (!tb.Equals(tb_tmp)) {
                                tree_db.Nodes.Add(tree_tb);
                                tree_tb = new TreeNode(tb, 1, 1);
                            }

                            tree_tb.Nodes.Add(tree_col);

                            if (!db.Equals(db_tmp)) {
                                loadTreeExplorer.ReportProgress(0, tree_db);
                                tree_db = new TreeNode(db, 0, 0);
                            }

                            db_tmp = db;
                            tb_tmp = tb;   
                        }
                    }
                    if (rd.HasRows)
                        loadTreeExplorer.ReportProgress(0, tree_db);
                }
            } catch (MySqlException e) {
                err = true;
                err_msg = e.Message;
            } finally {
                if (rd != null)
                    rd.Dispose();
            }

            if (err)
                throw new Exception(err_msg);

//-----------------------------------------------------------------------------------------------------------------

col_BINARY = System.Byte[]
col_VARBINARY = System.Byte[]
col_TINYBLOB = System.Byte[]
col_BLOB = System.Byte[]
col_MEDIUMBLOB = System.Byte[]
col_LONGBLOB = System.Byte[]





		private bool isEditedCell;

        private List<string> lsValPri = new List<string>();
        private void gridTable_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e) {
            if (outGrid == OutGrid.ExecutedFromSQLBuilder) {
                lsValPri.Clear();
                for (int i = 0; i < IndexPrimaryKey.Count; ++i)
                    lsValPri.Add(gridTable[IndexPrimaryKey[i], e.RowIndex].Value.ToString());
                isEditedCell = false;
            }
        }

        private void gridTable_CellValueChanged(object sender, DataGridViewCellEventArgs e) {
            if (outGrid == OutGrid.ExecutedFromSQLBuilder) {

                for (int i = 0; i < listAddRow.Count; ++i) {
                    if (listAddRow[i] == e.RowIndex)
                        return;
                }
                for (int i = 0; i < listEditRows.Count; ++i) {
                    if (listEditRows[i].RowIndex == e.RowIndex) {
                        for (int j = 0; j < listEditRows[i].ColumnIndex.Count; ++j) {
                            if (listEditRows[i].ColumnIndex[j] == e.ColumnIndex)
                                return;
                        }
                        listEditRows[i].ColumnIndex.Add(e.ColumnIndex);
                        return;
                    }
                }
                List<int> col = new List<int>();
                col.Add(e.ColumnIndex);
                List<string> pri = new List<string>();
                pri.AddRange(lsValPri.ToArray());
                EditRow edit = new EditRow(col, pri, e.RowIndex);
                listEditRows.Add(edit);
                isEditedCell = true;
            }
            this.IsEdited = true;
        }


//user privileges
error : SELECT command denied to user 'lolo'@'localhost' for table 'user', error code : -2147467259